version: 2
jobs:
  build:
    working_directory: ~/metabase/metabase
    parallelism: 7
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
      DEBIAN_FRONTEND: noninteractive
      DEBCONF_NONINTERACTIVE_SEEN: true
    machine:
      image: circleci/classic:201808-01
    steps:
    - checkout
    - run:
        name: Stop automatic VM updates
        working_directory: ~/metabase/metabase
        command: sudo ./.circleci/stop-auto-updates.sh
    - run:
        name: M O N G O ?
        command: >
          sudo apt-get purge mongo* || true;
          sudo apt-get purge mongodb-org* || true;
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5;
          echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.6 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list;
          sudo apt-get update;
          sudo ./bin/ci-install -y mongodb-org-server=3.6.7;
          sudo systemctl unmask mongod;
          sudo systemctl enable mongod.service || echo 'Enable mongod.service failed';
          sudo systemctl enable mongod || echo 'Enable mongod failed';
          sudo service mongod restart;
    - run:
        name: Install Postgres & MySQL
        command: >
          sudo apt update &&
          sudo ./bin/ci-install postgresql mysql-server
    - run:
        name: Set timezone to America/Los_Angeles
        command: >
          sudo cp /usr/share/zoneinfo/America/Los_Angeles /etc/localtime;
          echo 'America/Los_Angeles' | sudo tee -a /etc/timezone;
          # See https://stackoverflow.com/questions/8671308
          echo 'tzdata tzdata/Areas select America' > tz_pre_seed.txt
          echo 'tzdata tzdata/Zones/America select Los_Angeles' >> tz_pre_seed.txt
          debconf-set-selections tz_pre_seed.txt
          sudo dpkg-reconfigure -f noninteractive tzdata;
    - run:
        name: Restart DBMSes
        command: >
          sudo service postgresql restart;
          sudo service mysql restart --default-time-zone='America/Los_Angeles';
    - run:
        name: Create MySQL user
        command: >
          sudo mysql --defaults-file=/etc/mysql/debian.cnf --database mysql -e "CREATE USER ubuntu; GRANT ALL PRIVILEGES ON *.* TO 'ubuntu'@'%';"
    - run:
        name: Enable MySQL Timezone support
        command: mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u ubuntu mysql;
    - run:
        name: Create MySQL test DB
        command: mysql -u ubuntu --database mysql -e 'CREATE DATABASE circle_test;'
    - run:
        name: Create Postgres user
        command: sudo -u postgres psql postgres -c "CREATE USER ubuntu SUPERUSER; ALTER ROLE ubuntu PASSWORD '123456';"
    - run:
        name: Create Postgres test DB
        command: PGPASSWORD='123456' psql -U ubuntu -h localhost postgres -c 'CREATE DATABASE circle_test;'
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run:
        name: Make Circle artifact directories
        command:  mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    - run:
        name: Install NVM
        working_directory: ~/metabase/metabase
        command: >
          nvm install 8.9.0;
          nvm alias default 8.9.0;
          node --version
    - run:
        name: Does docker work??
        command: >
          docker --version;
          docker run hello-world
    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
# TEMPORARILY DISABLED UNTIL POST CIRCLE-2.0 MIGRATION SINCE 1.0 CACHE IS INCOMPATIBLE
# - restore_cache:
#     working_directory: ~/metabase/metabase
#     keys:
#     # This branch if available
#     - v1-dep-{{ .Branch }}-
#     # Default branch if not
#     - v1-dep-master-
#     # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
#     - v1-dep-
    # This is based on your 1.0 configuration file or project settings
    - run:
        name: Install lein dependencies
        working_directory: ~/metabase/metabase
        command: lein deps
    - run:
        name: Install yarn
        working_directory: ~/metabase/metabase
        command: npm install -g 'yarn@>=0.16.0'
    - run:
        name: Run yarn
        working_directory: ~/metabase/metabase
        command: SAUCE_CONNECT_DOWNLOAD_ON_INSTALL=true yarn
    - run:
        name: Create ./plugins directory
        working_directory: ~/metabase/metabase
        command: mkdir plugins
    # Save dependency cache
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        working_directory: ~/metabase/metabase
        paths:
        # This is a broad list of cache paths to include many possible development environments
        # You can probably delete some of these entries
        - vendor/bundle
        - ~/.m2
        - ~/.yarn
        - ~/.yarn-cache
        - ./node_modules
    - run:
        name: Run ./bin/ci
        working_directory: ~/metabase/metabase
        command: ./bin/ci
    # Deployment
    # Your existing circle.yml file contains deployment steps.
    # The config translation tool does not support translating deployment steps
    # since deployment in CircleCI 2.0 are better handled through workflows.
    # See the documentation for more information https://circleci.com/docs/2.0/workflows/
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: target/uberjar/metabase.jar
    - store_artifacts:
        path: screenshots
    - store_artifacts:
        path: /tmp/circleci-test-results
